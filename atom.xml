<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[John里的钊]]></title>
  <link href="http://everglow62.github.io/atom.xml" rel="self"/>
  <link href="http://everglow62.github.io/"/>
  <updated>2017-03-20T16:55:27+08:00</updated>
  <id>http://everglow62.github.io/</id>
  <author>
    <name><![CDATA[JohnShen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UCore实验环境搭建]]></title>
    <link href="http://everglow62.github.io/blog/2017/03/20/ucoreshi-yan-huan-jing-da-jian/"/>
    <updated>2017-03-20T16:36:52+08:00</updated>
    <id>http://everglow62.github.io/blog/2017/03/20/ucoreshi-yan-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p>​       清华大学的UCore和MIT的xv6比较类似，都需要用到i386-elf-gcc来编译，但在Mac上安装比较麻烦，所以我选择安装Ubuntu虚拟机。</p>

<p>​ 这个虚拟机只做编译时使用，需要coding和qemu运行时，仍在Mac主机上进行，这就需要为Ubuntu虚拟机和主机设置共享文件夹。步骤如下：</p>

<ul>
<li>在VirtualBox中安装增强插件</li>
<li>开机前设置，共享文件夹名称、位置，❗️不要勾选自动挂载</li>
<li>开机后terminal，sudo mount -t vboxsf (共享文件夹名) /mnt/(挂载点名)</li>
</ul>


<p>完成😀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[02-线性结构1 两个有序链表序列的合并]]></title>
    <link href="http://everglow62.github.io/blog/2017/03/14/02-xian-xing-jie-gou-1-liang-ge-you-xu-lian-biao-xu-lie-de-he-bing/"/>
    <updated>2017-03-14T20:36:21+08:00</updated>
    <id>http://everglow62.github.io/blog/2017/03/14/02-xian-xing-jie-gou-1-liang-ge-you-xu-lian-biao-xu-lie-de-he-bing</id>
    <content type="html"><![CDATA[<p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ElementType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">PtrToNode</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ElementType</span> <span class="n">Data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PtrToNode</span>   <span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">List</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="nf">Read</span><span class="p">();</span> <span class="cm">/* 细节在此不表 */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Print</span><span class="p">(</span> <span class="n">List</span> <span class="n">L</span> <span class="p">);</span> <span class="cm">/* 细节在此不表；空链表将输出NULL */</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="nf">Merge</span><span class="p">(</span> <span class="n">List</span> <span class="n">L1</span><span class="p">,</span> <span class="n">List</span> <span class="n">L2</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">L1</span><span class="p">,</span> <span class="n">L2</span><span class="p">,</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>    <span class="n">L1</span> <span class="o">=</span> <span class="n">Read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">L2</span> <span class="o">=</span> <span class="n">Read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="n">Merge</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span> <span class="n">L2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 你的代码将被嵌在这里 */</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入样例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span> <span class="mi">8</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出样例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">8</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">NULL</span>
</span><span class='line'><span class="nb">NULL</span>
</span></code></pre></td></tr></table></div></figure>


<p>样例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ElementType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">PtrToNode</span><span class="p">;</span> <span class="c1">//定义新类型，名字为PtrToNode，类型为指向Node结构体的指针</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="p">{</span>
</span><span class='line'>    <span class="n">ElementType</span> <span class="n">Data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PtrToNode</span> <span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">List</span><span class="p">;</span> <span class="c1">//❤️定义一个链表，存储的数据格式是Node结构体，名字为List</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="nf">Read</span><span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Print</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>   <span class="c1">//注意括号里带参数的数据类型</span>
</span><span class='line'><span class="n">List</span> <span class="nf">Merge</span><span class="p">(</span><span class="n">List</span> <span class="n">L1</span><span class="p">,</span> <span class="n">List</span> <span class="n">L2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">L1</span><span class="p">,</span> <span class="n">L2</span><span class="p">,</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>    <span class="n">L1</span> <span class="o">=</span> <span class="n">Read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">L2</span> <span class="o">=</span> <span class="n">Read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="n">Merge</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span> <span class="n">L2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Print</span><span class="p">(</span><span class="n">L2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">List</span> <span class="nf">Merge</span><span class="p">(</span><span class="n">List</span> <span class="n">L1</span><span class="p">,</span> <span class="n">List</span> <span class="n">L2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PtrToNode</span> <span class="n">L</span> <span class="o">=</span> <span class="p">(</span><span class="n">PtrToNode</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>  <span class="c1">//malloc出struct Node大小的空间，类型转换为PtrToNode，❤️这是头指针</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">p</span> <span class="o">=</span> <span class="n">L1</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">q</span> <span class="o">=</span> <span class="n">L2</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>    <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">Data</span> <span class="o">&lt;</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">L1</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">L2</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">List</span> <span class="nf">Read</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PtrToNode</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PtrToNode</span> <span class="n">last</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">PtrToNode</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>    <span class="n">h</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">last</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">len</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PtrToNode</span> <span class="n">node</span> <span class="o">=</span> <span class="p">(</span><span class="n">PtrToNode</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">Data</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">last</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Print</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;NULL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">L</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Data</span><span class="p">);</span>
</span><span class='line'>        <span class="n">L</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://everglow62.github.io/blog/2017/03/13/my-first-blog/"/>
    <updated>2017-03-13T14:35:19+08:00</updated>
    <id>http://everglow62.github.io/blog/2017/03/13/my-first-blog</id>
    <content type="html"><![CDATA[<p>又是一篇第一篇😉</p>
]]></content>
  </entry>
  
</feed>
